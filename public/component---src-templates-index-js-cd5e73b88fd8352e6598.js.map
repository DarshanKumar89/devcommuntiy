{"version":3,"sources":["webpack:///./src/templates/index.js"],"names":["__webpack_require__","r","__webpack_exports__","d","postsQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","_components_seo__WEBPACK_IMPORTED_MODULE_2__","_components_layout__WEBPACK_IMPORTED_MODULE_3__","_components_post__WEBPACK_IMPORTED_MODULE_4__","_components_navigation__WEBPACK_IMPORTED_MODULE_5__","Index","_ref","data","_ref$pageContext","pageContext","nextPagePath","previousPagePath","posts","allMarkdownRemark","edges","a","createElement","Fragment","map","_ref2","node","id","autoExcerpt","excerpt","_node$frontmatter","frontmatter","title","date","path","author","coverImage","tags","key","previousPath","previousLabel","nextPath","nextLabel","propTypes","PropTypes","object","isRequired","shape","string"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,+BAAAE,IAAA,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAAG,EAAAR,EAAA,GAAAS,EAAAT,EAAAO,EAAAC,GAAAE,EAAAV,EAAA,KAAAW,EAAAX,EAAA,KAAAY,EAAAZ,EAAA,KAAAa,EAAAb,EAAA,KAQMc,EAAQ,SAAAC,GAA+D,IAA5DC,EAA4DD,EAA5DC,KAA4DC,EAAAF,EAAtDG,YAAeC,EAAuCF,EAAvCE,aAAcC,EAAyBH,EAAzBG,iBAEpBC,EAC1BL,EADFM,kBAAqBC,MAGvB,OACEjB,EAAAkB,EAAAC,cAAAnB,EAAAkB,EAAAE,SAAA,KACEpB,EAAAkB,EAAAC,cAACf,EAAA,EAAD,MACAJ,EAAAkB,EAAAC,cAACd,EAAA,EAAD,KACGU,EAAMM,IAAI,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KAEVC,EAWED,EAXFC,GACSC,EAUPF,EAVFG,QAHqBC,EAanBJ,EATFK,YACEC,EALmBF,EAKnBE,MACAC,EANmBH,EAMnBG,KACAC,EAPmBJ,EAOnBI,KACAC,EARmBL,EAQnBK,OACAC,EATmBN,EASnBM,WACAP,EAVmBC,EAUnBD,QACAQ,EAXmBP,EAWnBO,KAIJ,OACElC,EAAAkB,EAAAC,cAACb,EAAA,EAAD,CACE6B,IAAKX,EACLK,MAAOA,EACPC,KAAMA,EACNC,KAAMA,EACNC,OAAQA,EACRC,WAAYA,EACZC,KAAMA,EACNR,QAASA,GAAWD,MAK1BzB,EAAAkB,EAAAC,cAACZ,EAAA,EAAD,CACE6B,aAActB,EACduB,cAAc,cACdC,SAAUzB,EACV0B,UAAU,mBAOpB/B,EAAMgC,UAAY,CAChB9B,KAAM+B,IAAUC,OAAOC,WACvB/B,YAAa6B,IAAUG,MAAM,CAC3B/B,aAAc4B,IAAUI,OACxB/B,iBAAkB2B,IAAUI,UAIzB,IAAM/C,EAAU,YAiCRU","file":"component---src-templates-index-js-cd5e73b88fd8352e6598.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\nimport SEO from '../components/seo'\nimport Layout from '../components/layout'\nimport Post from '../components/post'\nimport Navigation from '../components/navigation'\n\nconst Index = ({ data, pageContext: { nextPagePath, previousPagePath } }) => {\n  const {\n    allMarkdownRemark: { edges: posts },\n  } = data\n\n  return (\n    <>\n      <SEO />\n      <Layout>\n        {posts.map(({ node }) => {\n          const {\n            id,\n            excerpt: autoExcerpt,\n            frontmatter: {\n              title,\n              date,\n              path,\n              author,\n              coverImage,\n              excerpt,\n              tags,\n            },\n          } = node\n\n          return (\n            <Post\n              key={id}\n              title={title}\n              date={date}\n              path={path}\n              author={author}\n              coverImage={coverImage}\n              tags={tags}\n              excerpt={excerpt || autoExcerpt}\n            />\n          )\n        })}\n\n        <Navigation\n          previousPath={previousPagePath}\n          previousLabel=\"Newer posts\"\n          nextPath={nextPagePath}\n          nextLabel=\"Older posts\"\n        />\n      </Layout>\n    </>\n  )\n}\n\nIndex.propTypes = {\n  data: PropTypes.object.isRequired,\n  pageContext: PropTypes.shape({\n    nextPagePath: PropTypes.string,\n    previousPagePath: PropTypes.string,\n  }),\n}\n\nexport const postsQuery = graphql`\n  query($limit: Int!, $skip: Int!) {\n    allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"//posts//\" } }\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          id\n          excerpt\n          frontmatter {\n            title\n            date(formatString: \"DD MMMM YYYY\")\n            path\n            author\n            excerpt\n            tags\n            coverImage {\n              childImageSharp {\n                fluid(maxWidth: 800) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default Index\n"],"sourceRoot":""}